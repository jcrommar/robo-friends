{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f4f68ab.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, id}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 ba'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n            aria-label=\"Search Robots\"\n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' \n            placeholder='Search robots'\n            onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n    \n    render() {\n        if (this.state.hasError) {\n            return <h1>Whoa, this isn't good!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport './App.css'; \n\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n        \n    }\n}\n\nconst mapDispatchToProps = (dispatch) => { //triggers the action actions.js\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)), // will receive text\n        onRequestRobots: () => dispatch(requestRobots())\n    } \n}\n\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { robots, searchField, onSearchChange, isPending } = this.props;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        return isPending ?\n            <h1>Loading...</h1> :\n            (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends.com</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                    { isPending ? <h1>Loading</h1> :\n                        <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    }\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);  //Higher order function-components - runs another function inside a function","import {\n     CHANGE_SEARCH_FIELD,\n     REQUEST_ROBOTS_PENDING,\n     REQUEST_ROBOTS_SUCCESS,\n     REQUEST_ROBOTS_FAILED \n    } from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n     } from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n} //start point - initial state\n\nexport const searchRobots = (state=initialStateSearch, action={}) => { //reducer\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n        isPending: false,\n        robots: [],\n        error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, { isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, { robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, { error: action.payload, isPending: false})\n    default:\n        return state;\n    }\n}\n\n//3 PRINCIPLES \n//1. Single Source of Truth\n//2. State is read only\n//3. Changes using pure functions (get input and return an output - no side effects, no modifications.)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport { applyMiddleware } from 'redux';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store =\ncreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n               <Provider store={store}>\n                    <App />\n               </Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}